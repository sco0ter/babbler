/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2014-2019 Christian Schudt
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package rocks.xmpp.session.server;

import rocks.xmpp.im.roster.server.spi.IdGenerator;

import javax.enterprise.context.ApplicationScoped;
import java.security.SecureRandom;
import java.util.Base64;

/**
 * Generates an identifier using 160-bit secure random value, which is encoded as URL and file safe Base64 (without padding).
 * <p>
 * Unlike {@link java.util.UUID}, which only uses 122 bits of entropy, identifiers generated by this class are more secure,
 * because they are harder to guess and more compact because the resulting string is only 27 characters (unlike 36 from UUID).
 * <p>
 * The resulting identifier uses the characters {@code [A-Za-z0-9-_]}.
 * <p>
 * Sample output: {@code L92DzM7fr_SakyVQlGXXjaNyxbk}
 *
 * @author Christian Schudt
 */
@ApplicationScoped
public class SecureRandomIdGenerator implements IdGenerator {

    private static final SecureRandom SECURE_RANDOM = new SecureRandom();

    private static final Base64.Encoder ENCODER = Base64.getUrlEncoder().withoutPadding();

    @Override
    public String generateId() {
        byte[] buffer = new byte[20];
        SECURE_RANDOM.nextBytes(buffer);
        return ENCODER.encodeToString(buffer);
    }
}
